name: Check

on:
  push:
    branches:
      - main
      - "releases/**"
  pull_request:
    branches:
      - main
      - "releases/**"

permissions: {}

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      actions: read # for detecting the Github Actions environment.
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
        with:
          fetch-depth: 0 # Required by cocogitto
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: stable
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
        with:
          repository: gotestyourself/gotestsum
          ref: ddd0b05a6878e2e8257a2abe6e7df66cebc53d0e # v1.12.3
          path: .dist/tools/gotestsum
      - run: |
          cd ./.dist/tools/gotestsum
          go install .
      - name: Download dependencies
        run: go mod download
      - name: Test
        run: |
          gotestsum \
            --junitfile unit-tests.xml \
            --jsonfile unit-tests.json \
            -- \
            -race \
            -coverprofile=coverage.txt \
          ./...
      - name: Upload coverage reports
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Lint commit message
        uses: cocogitto/cocogitto-action@c7a74f5406bab86da17da0f0e460a69f8219a68c # v3.11.0
      - name: Lint markdown files
        uses: DavidAnson/markdownlint-cli2-action@992badcdf24e3b8eb7e87ff9287fe931bcb00c6e # v20.0.0
        with:
          globs: |
            **/*.md
            !.dist/**
            !CHANGELOG.md
      - name: Lint go files
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
      - name: Upload test results to Codecov
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1
        if: ${{ always() }}
        with:
          file: ./unit-tests.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Github
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ always() }}
        with:
          name: test-results-${{ github.run_id }}
          path: |
            ./unit-tests.xml
            ./unit-tests.json
            ./coverage.txt
      - name: Build
        run: go build -v ./...
      - name: Security
        id: scan
        uses: anchore/scan-action@1638637db639e0ade3258b51db49a9a137574c3e # v6.5.1
        env:
          GRYPE_NAME: mono
        with:
          path: "."
          fail-build: true
          severity-cutoff: critical
      - name: Upload SARIF report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sarif-${{ github.run_id }}
          path: |
            ${{ steps.scan.outputs.sarif }}
  snapshots:
    runs-on: ubuntu-latest
    permissions:
      actions: read # for detecting the Github Actions environment.
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: stable
      - name: Download dependencies
        run: go mod download
      - name: Build snapshot
        id: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          GIT_HASH="$(git rev-parse HEAD)"
          GIT_HASH_SHORT="$(git show -s --format=%h "${GIT_HASH}")"
          VERSION="v0.0.0-SNAPSHOT-${GIT_HASH_SHORT}"
          BUILD_DATE="$(git show -s --format='%cI' "${GIT_HASH}")"
          GIT_TREE_STATE="dirty"
          if [ -z "$(git status --porcelain)" ]; then
            GIT_TREE_STATE="clean"
          fi
          ARTIFACT_NAME="mono_${VERSION}_${GOOS}_${GOARCH}"
          echo "Building artifact: ${ARTIFACT_NAME}"
          LD_FLAGS="-s -w \
            -X main.Version=${VERSION} \
            -X main.GitHash=${GIT_HASH} \
            -X main.BuildDate=${BUILD_DATE} \
            -X main.GitTreeState=${GIT_TREE_STATE}"
          echo "Flags: ${LD_FLAGS}"
          go build -v \
            -ldflags "${LD_FLAGS}" \
            -o "./.dist/${ARTIFACT_NAME}" \
            .
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> "$GITHUB_ENV"
          echo "artifact_name=${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
          echo "build_info=${VERSION} ${BUILD_DATE} ${GIT_HASH} ${GIT_TREE_STATE}" >> "$GITHUB_OUTPUT"
      - name: Compress executable
        uses: crazy-max/ghaction-upx@db8cc9515a4a7ea1b312cb82fbeae6d716daf777 # v3.2.0
        with:
          files: |
            ./.dist/mono_*
          args: -fq --best --lzma --force-macos
      - name: Checksum
        run: |
          IN="./.dist/${ARTIFACT_NAME}"
          echo "Input: ${IN}"
          OUT="./.dist/${ARTIFACT_NAME}.sha256"
          echo "Output: ${OUT}"
          sha256sum "${IN}" > "${OUT}"
          SHA="$(cat "./.dist/${ARTIFACT_NAME}.sha256")"
          echo "Checksum: ${SHA}"
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ steps.build.outputs.artifact_name }}
          path: ./.dist/${{ steps.build.outputs.artifact_name }}
          if-no-files-found: error
